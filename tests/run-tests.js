#!/usr/bin/env node

const StressTester = require('./stress-test');
const SecurityTester = require('./security-test');
const { getConfig, validateConfig } = require('./test-config');

/**
 * Script Principal para Execu√ß√£o de Testes
 * 
 * Executa todos os testes de estresse e seguran√ßa
 * com configura√ß√µes baseadas no ambiente
 */

class TestRunner {
    constructor() {
        this.config = getConfig();
        this.results = {
            stress: null,
            security: null,
            startTime: 0,
            endTime: 0
        };
    }

    async runAllTests() {
        console.log('üöÄ INICIANDO SUITE COMPLETA DE TESTES');
        console.log('='.repeat(60));
        console.log(`üåç Ambiente: ${process.env.NODE_ENV || 'development'}`);
        console.log(`üîó Servidor: ${this.config.server.baseURL}`);
        console.log(`‚è±Ô∏è  Timeout: ${this.config.server.timeout}ms`);
        console.log('='.repeat(60));
        
        this.results.startTime = Date.now();
        
        try {
            // Valida configura√ß√µes
            const configErrors = validateConfig();
            if (configErrors.length > 0) {
                console.error('‚ùå Erros de configura√ß√£o:');
                configErrors.forEach(error => console.error(`   - ${error}`));
                return;
            }
            
            // Teste 1: Teste de Estresse
            console.log('\nüìä EXECUTANDO TESTE DE ESTRESSE...');
            const stressTester = new StressTester(this.config.server.baseURL);
            await stressTester.runFullTest();
            this.results.stress = stressTester.results;
            
            // Pequena pausa entre testes
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Teste 2: Teste de Seguran√ßa
            console.log('\nüõ°Ô∏è EXECUTANDO TESTE DE SEGURAN√áA...');
            const securityTester = new SecurityTester(this.config.server.baseURL);
            await securityTester.runSecurityTest();
            this.results.security = securityTester.results;
            
        } catch (error) {
            console.error('‚ùå Erro durante execu√ß√£o dos testes:', error.message);
        }
        
        this.results.endTime = Date.now();
        this.generateFinalReport();
    }

    generateFinalReport() {
        const totalTime = this.results.endTime - this.results.startTime;
        
        console.log('\n' + '='.repeat(80));
        console.log('üéØ RELAT√ìRIO FINAL COMPLETO');
        console.log('='.repeat(80));
        
        console.log(`‚è±Ô∏è  Tempo total de execu√ß√£o: ${(totalTime / 1000).toFixed(2)}s`);
        console.log(`üìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}`);
        console.log(`üåç Ambiente: ${process.env.NODE_ENV || 'development'}`);
        
        // Resumo do teste de estresse
        if (this.results.stress) {
            console.log('\nüìä RESUMO DO TESTE DE ESTRESSE:');
            console.log(`   ‚Ä¢ Total de requests: ${this.results.stress.totalRequests}`);
            console.log(`   ‚Ä¢ Sucessos: ${this.results.stress.successfulRequests}`);
            console.log(`   ‚Ä¢ Falhas: ${this.results.stress.failedRequests}`);
            console.log(`   ‚Ä¢ Rate Limited: ${this.results.stress.rateLimitedRequests}`);
            console.log(`   ‚Ä¢ Pacotes perdidos: ${this.results.stress.lostPackets}`);
            console.log(`   ‚Ä¢ Tempo m√©dio de resposta: ${this.results.stress.averageResponseTime.toFixed(2)}ms`);
        }
        
        // Resumo do teste de seguran√ßa
        if (this.results.security) {
            console.log('\nüõ°Ô∏è RESUMO DO TESTE DE SEGURAN√áA:');
            console.log(`   ‚Ä¢ Ataques bloqueados: ${this.results.security.blockedAttacks}`);
            console.log(`   ‚Ä¢ Ataques bem-sucedidos: ${this.results.security.successfulAttacks}`);
            console.log(`   ‚Ä¢ Vulnerabilidades encontradas: ${this.results.security.vulnerabilities.length}`);
        }
        
        // An√°lise geral
        console.log('\nüìã AN√ÅLISE GERAL:');
        
        let score = 100;
        let issues = [];
        
        // Verifica rate limiting
        if (this.results.stress && this.results.stress.rateLimitedRequests > 0) {
            console.log('   ‚úÖ Rate limiting funcionando corretamente');
        } else {
            console.log('   ‚ö†Ô∏è Rate limiting pode n√£o estar funcionando');
            score -= 20;
            issues.push('Rate limiting n√£o detectado');
        }
        
        // Verifica pacotes perdidos
        if (this.results.stress && this.results.stress.lostPackets > 0) {
            console.log(`   ‚ö†Ô∏è ${this.results.stress.lostPackets} pacotes perdidos`);
            score -= Math.min(30, this.results.stress.lostPackets * 5);
            issues.push(`${this.results.stress.lostPackets} pacotes perdidos`);
        } else {
            console.log('   ‚úÖ Nenhum pacote perdido');
        }
        
        // Verifica vulnerabilidades de seguran√ßa
        if (this.results.security && this.results.security.vulnerabilities.length > 0) {
            console.log(`   üö® ${this.results.security.vulnerabilities.length} vulnerabilidades encontradas`);
            score -= this.results.security.vulnerabilities.length * 15;
            issues.push(`${this.results.security.vulnerabilities.length} vulnerabilidades de seguran√ßa`);
        } else {
            console.log('   ‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada');
        }
        
        // Verifica performance
        if (this.results.stress && this.results.stress.averageResponseTime > 1000) {
            console.log(`   ‚ö†Ô∏è Tempo de resposta alto: ${this.results.stress.averageResponseTime.toFixed(2)}ms`);
            score -= 10;
            issues.push('Tempo de resposta alto');
        } else {
            console.log('   ‚úÖ Performance adequada');
        }
        
        // Score final
        score = Math.max(0, score);
        console.log(`\nüèÜ SCORE FINAL: ${score}/100`);
        
        if (score >= 90) {
            console.log('   üéâ EXCELENTE! Sistema muito bem configurado');
        } else if (score >= 70) {
            console.log('   üëç BOM! Algumas melhorias necess√°rias');
        } else if (score >= 50) {
            console.log('   ‚ö†Ô∏è ATEN√á√ÉO! V√°rias melhorias necess√°rias');
        } else {
            console.log('   üö® CR√çTICO! Muitas melhorias necess√°rias');
        }
        
        // Recomenda√ß√µes
        if (issues.length > 0) {
            console.log('\nüîß RECOMENDA√á√ïES PRIORIT√ÅRIAS:');
            issues.forEach((issue, index) => {
                console.log(`   ${index + 1}. ${issue}`);
            });
        }
        
        console.log('\nüìö PR√ìXIMOS PASSOS:');
        console.log('   1. Revisar logs do servidor durante os testes');
        console.log('   2. Ajustar configura√ß√µes de rate limiting se necess√°rio');
        console.log('   3. Implementar corre√ß√µes de seguran√ßa identificadas');
        console.log('   4. Executar testes novamente para verificar corre√ß√µes');
        
        console.log('='.repeat(80));
    }
}

// Fun√ß√£o principal
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üöÄ Teste de Estresse e Seguran√ßa - Servidor Tradicional

Uso: node run-tests.js [op√ß√µes]

Op√ß√µes:
  --help, -h          Mostra esta ajuda
  --stress-only       Executa apenas teste de estresse
  --security-only     Executa apenas teste de seguran√ßa
  --config <arquivo>  Arquivo de configura√ß√£o personalizado
  --env <ambiente>    Ambiente (development, test, production)

Vari√°veis de ambiente:
  NODE_ENV            Ambiente de execu√ß√£o
  TEST_BASE_URL       URL base do servidor
  TEST_TIMEOUT        Timeout das requisi√ß√µes
  TEST_LOG_LEVEL      N√≠vel de logging

Exemplos:
  node run-tests.js
  node run-tests.js --stress-only
  node run-tests.js --env production
  TEST_BASE_URL=http://localhost:3001 node run-tests.js
        `);
        return;
    }
    
    const runner = new TestRunner();
    
    if (args.includes('--stress-only')) {
        console.log('üìä Executando apenas teste de estresse...');
        const stressTester = new StressTester(runner.config.server.baseURL);
        await stressTester.runFullTest();
    } else if (args.includes('--security-only')) {
        console.log('üõ°Ô∏è Executando apenas teste de seguran√ßa...');
        const securityTester = new SecurityTester(runner.config.server.baseURL);
        await securityTester.runSecurityTest();
    } else {
        await runner.runAllTests();
    }
}

// Executa se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = TestRunner;
